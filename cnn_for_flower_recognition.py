{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"_kg_hide-output\":true,\"_kg_hide-input\":true,\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:11:55.595535Z\",\"iopub.execute_input\":\"2023-04-06T12:11:55.596402Z\",\"iopub.status.idle\":\"2023-04-06T12:11:55.795945Z\",\"shell.execute_reply.started\":\"2023-04-06T12:11:55.596362Z\",\"shell.execute_reply\":\"2023-04-06T12:11:55.794148Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [markdown]\n# # **FLOWER RECOGNITION**\n\n# %% [markdown]\n# **ALL THE COMMENTED CODE IS MY OLD VERSION CODE, WHERE I WAS DONG IN DIFFERE WAY**\n\n# %% [markdown]\n# # Importing necessary libraries\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:11:55.797064Z\",\"iopub.execute_input\":\"2023-04-06T12:11:55.797452Z\",\"iopub.status.idle\":\"2023-04-06T12:12:03.224727Z\",\"shell.execute_reply.started\":\"2023-04-06T12:11:55.797410Z\",\"shell.execute_reply\":\"2023-04-06T12:12:03.223613Z\"}}\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Flatten,Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import Image, display\nfrom keras_tuner import RandomSearch\nfrom keras_tuner.engine.hyperparameters import HyperParameters\nfrom tqdm import tqdm\nimport cv2\nimport random as rn\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# %% [markdown]\n# **displaying flower images from each class**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:12:03.226496Z\",\"iopub.execute_input\":\"2023-04-06T12:12:03.227315Z\",\"iopub.status.idle\":\"2023-04-06T12:12:03.265667Z\",\"shell.execute_reply.started\":\"2023-04-06T12:12:03.227247Z\",\"shell.execute_reply\":\"2023-04-06T12:12:03.264762Z\"}}\nlistOfImageNames = ['/kaggle/input/flowers-recognition/flowers/daisy/100080576_f52e8ee070_n.jpg',\n                    '/kaggle/input/flowers-recognition/flowers/dandelion/10043234166_e6dd915111_n.jpg',\n                    '/kaggle/input/flowers-recognition/flowers/rose/10503217854_e66a804309.jpg',\n                    '/kaggle/input/flowers-recognition/flowers/sunflower/1008566138_6927679c8a.jpg',\n                    '/kaggle/input/flowers-recognition/flowers/tulip/100930342_92e8746431_n.jpg']\nlabels = ['daisy','dandelion','rose','sunflower','tulip']\nfor i,imageName in enumerate(listOfImageNames):\n    print(labels[i])\n    display(Image(filename=imageName))\n    print(\"\\n\")\n\n# %% [markdown]\n# # **Splitting the folder into train validate and test folders**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:12:03.266963Z\",\"iopub.execute_input\":\"2023-04-06T12:12:03.267913Z\",\"iopub.status.idle\":\"2023-04-06T12:12:13.653571Z\",\"shell.execute_reply.started\":\"2023-04-06T12:12:03.267879Z\",\"shell.execute_reply\":\"2023-04-06T12:12:13.652327Z\"}}\n! pip install split-folders\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:12:13.656755Z\",\"iopub.execute_input\":\"2023-04-06T12:12:13.657140Z\",\"iopub.status.idle\":\"2023-04-06T12:12:13.664759Z\",\"shell.execute_reply.started\":\"2023-04-06T12:12:13.657094Z\",\"shell.execute_reply\":\"2023-04-06T12:12:13.663798Z\"}}\nimport splitfolders\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:12:13.667268Z\",\"iopub.execute_input\":\"2023-04-06T12:12:13.668191Z\",\"iopub.status.idle\":\"2023-04-06T12:12:18.631122Z\",\"shell.execute_reply.started\":\"2023-04-06T12:12:13.668154Z\",\"shell.execute_reply\":\"2023-04-06T12:12:18.629961Z\"}}\ninput_folder = \"/kaggle/input/flowers-recognition/flowers\"\noutput = \"Output_Folder\" \n\nsplitfolders.ratio(input_folder, output=output, seed=42, ratio=(0.7,0.2,0.1))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:12:19.423592Z\",\"iopub.execute_input\":\"2023-04-06T12:12:19.424173Z\",\"iopub.status.idle\":\"2023-04-06T12:12:19.445765Z\",\"shell.execute_reply.started\":\"2023-04-06T12:12:19.424135Z\",\"shell.execute_reply\":\"2023-04-06T12:12:19.444843Z\"}}\nimgss = cv2.imread(\"/kaggle/input/flowers-recognition/flowers/daisy/100080576_f52e8ee070_n.jpg\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:13:20.299699Z\",\"iopub.execute_input\":\"2023-04-06T12:13:20.300619Z\",\"iopub.status.idle\":\"2023-04-06T12:13:20.308016Z\",\"shell.execute_reply.started\":\"2023-04-06T12:13:20.300570Z\",\"shell.execute_reply\":\"2023-04-06T12:13:20.306781Z\"}}\nimgss.shape\n\n# %% [markdown]\n# ## **Data Augmentation**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.223779Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.224083Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.229565Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.224053Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.228336Z\"}}\n# datagen = ImageDataGenerator(\n#     rescale = 1./255,\n#     shear_range=0.2,\n#     horizontal_flip=True,\n#     vertical_flip=True,\n#     zoom_range=0.2,\n#     rotation_range = 40,\n#     width_shift_range= 0.2,\n#     height_shift_range= 0.2,\n#     validation_split=0.25\n# )\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:14:45.994244Z\",\"iopub.execute_input\":\"2023-04-06T12:14:45.995576Z\",\"iopub.status.idle\":\"2023-04-06T12:14:46.002161Z\",\"shell.execute_reply.started\":\"2023-04-06T12:14:45.995533Z\",\"shell.execute_reply\":\"2023-04-06T12:14:46.000906Z\"}}\ntrain_datagen = ImageDataGenerator(\n    rescale = 1./255,\n    shear_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True,\n    zoom_range=0.2,\n    rotation_range = 40,\n    width_shift_range= 0.2,\n    height_shift_range= 0.2\n)\n\nvalidate_datagen = ImageDataGenerator(\n    rescale = 1./255\n)\n\ntest_datagen = ImageDataGenerator(\n    rescale = 1./255\n)\n\n# %% [markdown]\n# ## **creating a training and testing data**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:14:48.861866Z\",\"iopub.execute_input\":\"2023-04-06T12:14:48.863079Z\",\"iopub.status.idle\":\"2023-04-06T12:14:49.179223Z\",\"shell.execute_reply.started\":\"2023-04-06T12:14:48.863028Z\",\"shell.execute_reply\":\"2023-04-06T12:14:49.178181Z\"}}\ntrain_data =  train_datagen.flow_from_directory(\n        \"/kaggle/working/Output_Folder/train\",\n        target_size=(150,150),\n        batch_size=32,\n        class_mode='categorical')\n\nvalidate_data = validate_datagen.flow_from_directory(\n        \"/kaggle/working/Output_Folder/val\",\n        target_size=(150,150),\n        batch_size=32,\n        class_mode='categorical')\n\ntest_data =  test_datagen.flow_from_directory(\n        \"/kaggle/working/Output_Folder/test\",\n        target_size=(150,150),\n        batch_size=32,\n        class_mode='categorical')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-06T12:15:32.641461Z\",\"iopub.execute_input\":\"2023-04-06T12:15:32.642054Z\",\"iopub.status.idle\":\"2023-04-06T12:15:32.647097Z\",\"shell.execute_reply.started\":\"2023-04-06T12:15:32.642015Z\",\"shell.execute_reply\":\"2023-04-06T12:15:32.645762Z\"}}\n\n\n# %% [markdown]\n# **spliting above data into, data and labels**\n\n# %% [markdown]\n# 1. total images in train_data = 3238, batch size = 32, therefore total no. of batches formed are 3238/32 = 101.\n# \n# 2. total images in test_data = 1079, batch size = 32, therefore total no. of batches formed are 1079/32 = 33.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.569690Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.569996Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.574871Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.569968Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.573591Z\"}}\n# train_labels = []\n# traindata = []\n# for i in range(0,102):\n#     train_labels.extend(np.array(train_data[i][1]))\n#     traindata.extend(np.array(train_data[i][0]))\n    \n# test_labels=[]\n# testdata = []\n# for i in range(0,34):\n#     test_labels.extend(np.array(test_data[i][1]))\n#     testdata.extend(np.array(test_data[i][0]))\n\n# %% [markdown]\n# ## **Visualizing random images from our training data**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.576642Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.577720Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.586040Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.577685Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.585053Z\"}}\n# train_data.class_indices\n\n# %% [markdown]\n# **transforming onhotencoded labels into actual labels name**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.589545Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.589806Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.598154Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.589781Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.597046Z\"}}\n# lbls = []\n# for i in train_labels:\n#     if all(i == [0.,0.,0.,0.,1.]):\n#         lbls.append('tulip')\n#     elif all(i == [0.,0.,0.,1.,0.]):\n#         lbls.append('sunflower')\n#     elif all(i == [0.,0.,1.,0.,0.]):\n#         lbls.append('rose')\n#     elif all(i == [0.,1.,0.,0.,0.]):\n#         lbls.append('dendelion')\n#     elif all(i == [1.,0.,0.,0.,0.]):\n#         lbls.append('daisy')\n\n# %% [code]\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.599693Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.600831Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.609379Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.600795Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.608312Z\"}}\n# fig,ax=plt.subplots(5,3)\n# fig.set_size_inches(15,15)\n# for i in range(5):\n#     for j in range (3):\n#         #l=rn.randint(0,len(train_labels))\n#         ax[i,j].imshow(train_data[l])\n#         #ax[i,j].set_title('Flower: '+lbls[l])\n        \n# plt.tight_layout()\n\n# %% [markdown]\n# **converting list into array**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.611867Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.612277Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.619622Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.612240Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.618645Z\"}}\n# traindata = np.array(traindata)\n# testdata = np.array(testdata)\n# train_labels = np.array(train_labels)\n# test_labels = np.array(test_labels)\n\n# %% [markdown]\n# # **Buliding Model**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-15T10:13:50.053713Z\",\"iopub.execute_input\":\"2023-03-15T10:13:50.054056Z\",\"iopub.status.idle\":\"2023-03-15T10:13:53.047730Z\",\"shell.execute_reply.started\":\"2023-03-15T10:13:50.054021Z\",\"shell.execute_reply\":\"2023-03-15T10:13:53.046676Z\"}}\nmodel = Sequential()\n\n# %% [markdown]\n# we are using four convolutional layers and four maxpooling layers\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-15T10:11:54.336121Z\",\"iopub.execute_input\":\"2023-03-15T10:11:54.336525Z\",\"iopub.status.idle\":\"2023-03-15T10:11:54.595013Z\",\"shell.execute_reply.started\":\"2023-03-15T10:11:54.336483Z\",\"shell.execute_reply\":\"2023-03-15T10:11:54.594242Z\"}}\nmodel.add(Conv2D(filters=32,activation='relu',kernel_size=5,input_shape=[150,150,3]))\nmodel.add(MaxPool2D(pool_size=2,padding='same'))\nmodel.add(Conv2D(filters=64,activation='relu',kernel_size=3))\nmodel.add(MaxPool2D(pool_size=2,padding='same'))\nmodel.add(Conv2D(filters=96,activation='relu',kernel_size=3))\nmodel.add(MaxPool2D(pool_size=2,padding='same'))\nmodel.add(Conv2D(filters=96,activation='relu',kernel_size=3))\nmodel.add(MaxPool2D(pool_size=2,padding='same'))\nmodel.add(Flatten())\n\n\nmodel.add(Dense(64,activation='relu'))\n\nmodel.add(Dense(5,activation='softmax'))\n\nmodel.summary()\n\n# %% [markdown]\n# **creating early stopping**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.621187Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.621670Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.629548Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.621634Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.628459Z\"}}\nes = EarlyStopping(monitor='val_loss',patience=3,mode='min')\n\n# %% [markdown]\n# ## **Compiling the model**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-15T10:11:54.603069Z\",\"iopub.execute_input\":\"2023-03-15T10:11:54.603458Z\",\"iopub.status.idle\":\"2023-03-15T10:11:54.632877Z\",\"shell.execute_reply.started\":\"2023-03-15T10:11:54.603422Z\",\"shell.execute_reply\":\"2023-03-15T10:11:54.631829Z\"}}\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\n# %% [markdown]\n# **training the model**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-15T10:12:39.546311Z\",\"iopub.execute_input\":\"2023-03-15T10:12:39.546709Z\",\"iopub.status.idle\":\"2023-03-15T10:12:39.622621Z\",\"shell.execute_reply.started\":\"2023-03-15T10:12:39.546664Z\",\"shell.execute_reply\":\"2023-03-15T10:12:39.621427Z\"}}\nmodel.fit(train_data,verbose=1,validation_data=validate_data,batch_size=128,epochs=50,callbacks=[es])\n\n# %% [markdown]\n# ## **Creating dataframe of losses and accuracies of model**\n\n# %% [code]\nlosses = model.history.history\n\n# %% [code]\ndf_loss = pd.DataFrame(losses)\n\n# %% [code]\ndf_loss.sort_values(by='val_accuracy',ascending=False)\n\n# %% [markdown]\n# ## **Visualizing the performance of model**\n\n# %% [code]\ndf_loss[['loss','val_loss']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"loss\",size=30)\nplt.title(\"LOSS VS EPOCHS\",size=60)\n\n# %% [code]\ndf_loss[['accuracy','val_accuracy']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"Accuracy\",size=30)\nplt.title(\"Accuracy VS EPOCHS\",size=60)\n\n# %% [markdown]\n# ## **Evaluting the model on test data**\n\n# %% [code]\nloss, accuracy= model.evaluate(test_data)\nprint(f'Accuracy: {accuracy*100}')\n\n# %% [markdown]\n# # -----------------------------------------------------------------------\n\n# %% [code]\n# lbls = []\n# for i in test_labels:\n#     if all(i == [0.,0.,0.,0.,1.]):\n#         lbls.append(4)\n#     elif all(i == [0.,0.,0.,1.,0.]):\n#         lbls.append(3)\n#     elif all(i == [0.,0.,1.,0.,0.]):\n#         lbls.append(2)\n#     elif all(i == [0.,1.,0.,0.,0.]):\n#         lbls.append(1)\n#     elif all(i == [1.,0.,0.,0.,0.]):\n#         lbls.append(0)\n\n# %% [code]\n# lbls = np.array(lbls)\n\n# %% [code]\n# len(lbls)\n\n# %% [code]\n# print(confusion_matrix(lbls,pred_digits))\n# print(classification_report(lbls,pred_digits))\n\n# %% [markdown]\n# # --------------------------------------------------------\n\n# %% [markdown]\n# # **USING KERAS TUNER FOR CNN MODEL**\n\n# %% [markdown]\n# **used for hyperparamenter tuning**\n\n# %% [markdown]\n# **creating build_model function, hp is hyperparameter**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.631063Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.631749Z\",\"iopub.status.idle\":\"2023-04-04T06:09:13.645546Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.631707Z\",\"shell.execute_reply\":\"2023-04-04T06:09:13.643814Z\"}}\nimport tensorflow as tf\nfrom tensorflow import keras\n\ndef build_model(hp):\n    model = keras.Sequential([\n        keras.layers.Conv2D(\n            filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16),\n            kernel_size=hp.Choice('conv_1_kernel', values=[3, 5]),\n            activation='relu',\n            input_shape=(150, 150, 3)\n        ),\n        keras.layers.MaxPool2D(\n            pool_size=hp.Choice('maxpool_1_kernel', values=[2,3, 5]),\n            padding='same'\n        ),\n        keras.layers.Conv2D(\n            filters=hp.Int('conv_2_filter', min_value=32, max_value=128, step=16),\n            kernel_size=hp.Choice('conv_2_kernel', values=[3, 5]),\n            activation='relu'\n        ),\n        keras.layers.MaxPool2D(\n            pool_size=hp.Choice('maxpool_2_kernel', values=[2,3, 5]),\n            padding='same'\n        ),\n        keras.layers.Flatten(),\n        keras.layers.Dense(\n            units=hp.Int('dense_1_units', min_value=32, max_value=256, step=16),\n            activation='relu'\n        ),\n        keras.layers.Dropout(rate=hp.Choice('dropout_1_rate', values=[0.5, 0.6, 0.8])),\n        keras.layers.Dense(\n            units=hp.Int('dense_2_units', min_value=32, max_value=128, step=16),\n            activation='relu'\n        ),\n        keras.layers.Dropout(rate=hp.Choice('dropout_2_rate', values=[0.5, 0.6, 0.8])),\n        keras.layers.Dense(5, activation='softmax')\n    ])\n    model.compile(\n        optimizer=keras.optimizers.Adam(learning_rate=hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    return model\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:13.647052Z\",\"iopub.execute_input\":\"2023-04-04T06:09:13.647618Z\",\"iopub.status.idle\":\"2023-04-04T06:09:16.516169Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:13.647581Z\",\"shell.execute_reply\":\"2023-04-04T06:09:16.515140Z\"}}\ntunersearch = RandomSearch(build_model,objective='val_accuracy',max_trials=5)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:09:16.517528Z\",\"iopub.execute_input\":\"2023-04-04T06:09:16.518876Z\",\"iopub.status.idle\":\"2023-04-04T06:20:07.159033Z\",\"shell.execute_reply.started\":\"2023-04-04T06:09:16.518837Z\",\"shell.execute_reply\":\"2023-04-04T06:20:07.157978Z\"}}\ntunersearch.search(train_data,epochs=5,validation_data=validate_data,callbacks=[es])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:20:07.160630Z\",\"iopub.execute_input\":\"2023-04-04T06:20:07.161690Z\",\"iopub.status.idle\":\"2023-04-04T06:20:07.166893Z\",\"shell.execute_reply.started\":\"2023-04-04T06:20:07.161649Z\",\"shell.execute_reply\":\"2023-04-04T06:20:07.165699Z\"}}\nbest_hps=tunersearch.get_best_hyperparameters(num_trials=1)[0]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:20:07.168410Z\",\"iopub.execute_input\":\"2023-04-04T06:20:07.169471Z\",\"iopub.status.idle\":\"2023-04-04T06:40:16.628314Z\",\"shell.execute_reply.started\":\"2023-04-04T06:20:07.169430Z\",\"shell.execute_reply\":\"2023-04-04T06:40:16.627348Z\"}}\nmodel = tunersearch.hypermodel.build(best_hps)\nhistory = model.fit(train_data,validation_data=validate_data, epochs=50)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T06:40:16.629936Z\",\"iopub.execute_input\":\"2023-04-04T06:40:16.630288Z\",\"iopub.status.idle\":\"2023-04-04T06:40:16.639511Z\",\"shell.execute_reply.started\":\"2023-04-04T06:40:16.630251Z\",\"shell.execute_reply\":\"2023-04-04T06:40:16.635537Z\"}}\nval_acc_per_epoch = history.history['val_accuracy']\nbest_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\nprint('Best epoch: %d' % (best_epoch))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T07:13:02.251204Z\",\"iopub.execute_input\":\"2023-04-04T07:13:02.251920Z\",\"iopub.status.idle\":\"2023-04-04T07:34:12.130419Z\",\"shell.execute_reply.started\":\"2023-04-04T07:13:02.251884Z\",\"shell.execute_reply\":\"2023-04-04T07:34:12.129288Z\"}}\nhypermodel = tunersearch.hypermodel.build(best_hps)\n\n# Retrain the model\nhypermodel.fit(train_data,epochs=best_epoch, validation_data=validate_data)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-04T07:34:12.132412Z\",\"iopub.execute_input\":\"2023-04-04T07:34:12.132866Z\",\"iopub.status.idle\":\"2023-04-04T07:34:13.580958Z\",\"shell.execute_reply.started\":\"2023-04-04T07:34:12.132827Z\",\"shell.execute_reply\":\"2023-04-04T07:34:13.579974Z\"}}\neval_result = hypermodel.evaluate(test_data)\nprint(\"[test loss, test accuracy]:\", eval_result)\n\n# %% [markdown]\n# # --------------------------------------------------------\n\n# %% [markdown]\n# # **Transfer learning**\n\n# %% [code]\n\n\n# %% [markdown]\n# ## **Using VGG16 model for image recognition**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:50.158132Z\",\"iopub.execute_input\":\"2023-04-03T03:18:50.158653Z\",\"iopub.status.idle\":\"2023-04-03T03:18:50.166432Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:50.158605Z\",\"shell.execute_reply\":\"2023-04-03T03:18:50.165350Z\"}}\nfrom keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:50.518410Z\",\"iopub.execute_input\":\"2023-04-03T03:18:50.519104Z\",\"iopub.status.idle\":\"2023-04-03T03:18:50.866866Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:50.519068Z\",\"shell.execute_reply\":\"2023-04-03T03:18:50.865797Z\"}}\n# add preprocessing layer to the front of VGG\nvgg = VGG16(input_shape=(150, 150, 3), weights='imagenet', include_top=False)\n\n# don't train existing weights\nfor layer in vgg.layers:\n  layer.trainable = False\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:52.296343Z\",\"iopub.execute_input\":\"2023-04-03T03:18:52.297278Z\",\"iopub.status.idle\":\"2023-04-03T03:18:52.336486Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:52.297225Z\",\"shell.execute_reply\":\"2023-04-03T03:18:52.335557Z\"}}\n# our layers - you can add more if you want\nX = MaxPool2D()(vgg.output)\nX = Flatten()(X)\nX = Dense(512, activation='relu')(X)\n\nX = Dense(5, activation='softmax')(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:52.703891Z\",\"iopub.execute_input\":\"2023-04-03T03:18:52.705800Z\",\"iopub.status.idle\":\"2023-04-03T03:18:52.715223Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:52.705749Z\",\"shell.execute_reply\":\"2023-04-03T03:18:52.714039Z\"}}\n# create a model object\nmodel = Model(inputs=vgg.input, outputs=X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:53.701370Z\",\"iopub.execute_input\":\"2023-04-03T03:18:53.701759Z\",\"iopub.status.idle\":\"2023-04-03T03:18:53.747534Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:53.701726Z\",\"shell.execute_reply\":\"2023-04-03T03:18:53.746804Z\"}}\n# view the structure of the model\nmodel.summary()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:54.601488Z\",\"iopub.execute_input\":\"2023-04-03T03:18:54.602485Z\",\"iopub.status.idle\":\"2023-04-03T03:18:54.623858Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:54.602448Z\",\"shell.execute_reply\":\"2023-04-03T03:18:54.622829Z\"}}\n# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:18:54.933296Z\",\"iopub.execute_input\":\"2023-04-03T03:18:54.933671Z\",\"iopub.status.idle\":\"2023-04-03T03:25:21.278381Z\",\"shell.execute_reply.started\":\"2023-04-03T03:18:54.933639Z\",\"shell.execute_reply\":\"2023-04-03T03:25:21.277334Z\"}}\n# fit the model\nmodel.fit(\n  train_data,\n  validation_data=validate_data,\n  epochs=15,\n  steps_per_epoch=len(train_data),\n  validation_steps=len(test_data)\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:25:21.280487Z\",\"iopub.execute_input\":\"2023-04-03T03:25:21.280973Z\",\"iopub.status.idle\":\"2023-04-03T03:25:21.288156Z\",\"shell.execute_reply.started\":\"2023-04-03T03:25:21.280933Z\",\"shell.execute_reply\":\"2023-04-03T03:25:21.287151Z\"}}\nlosses = model.history.history\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:25:21.290007Z\",\"iopub.execute_input\":\"2023-04-03T03:25:21.290553Z\",\"iopub.status.idle\":\"2023-04-03T03:25:21.300155Z\",\"shell.execute_reply.started\":\"2023-04-03T03:25:21.290514Z\",\"shell.execute_reply\":\"2023-04-03T03:25:21.299195Z\"}}\ndf_loss = pd.DataFrame(losses)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:25:21.303903Z\",\"iopub.execute_input\":\"2023-04-03T03:25:21.304231Z\",\"iopub.status.idle\":\"2023-04-03T03:25:21.695153Z\",\"shell.execute_reply.started\":\"2023-04-03T03:25:21.304204Z\",\"shell.execute_reply\":\"2023-04-03T03:25:21.694124Z\"}}\ndf_loss[['loss','val_loss']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"loss\",size=30)\nplt.title(\"LOSS VS EPOCHS\",size=60)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:25:21.696846Z\",\"iopub.execute_input\":\"2023-04-03T03:25:21.697477Z\",\"iopub.status.idle\":\"2023-04-03T03:25:22.069365Z\",\"shell.execute_reply.started\":\"2023-04-03T03:25:21.697437Z\",\"shell.execute_reply\":\"2023-04-03T03:25:22.068416Z\"}}\ndf_loss[['accuracy','val_accuracy']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"Accuracy\",size=30)\nplt.title(\"Accuracy VS EPOCHS\",size=60)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:16:49.010363Z\",\"iopub.execute_input\":\"2023-04-03T03:16:49.011111Z\",\"iopub.status.idle\":\"2023-04-03T03:16:55.758143Z\",\"shell.execute_reply.started\":\"2023-04-03T03:16:49.011071Z\",\"shell.execute_reply\":\"2023-04-03T03:16:55.757008Z\"}}\nfrom tensorflow.keras.applications import ResNet50\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:16:56.654258Z\",\"iopub.execute_input\":\"2023-04-03T03:16:56.655392Z\",\"iopub.status.idle\":\"2023-04-03T03:17:06.663160Z\",\"shell.execute_reply.started\":\"2023-04-03T03:16:56.655349Z\",\"shell.execute_reply\":\"2023-04-03T03:17:06.661285Z\"}}\n# add preprocessing layer to the front of VGG\nrsnet = ResNet50(input_shape=(150, 150, 3), weights='imagenet', include_top=False)\n# don't train existing weights\nfor layer in vgg.layers:\n  layer.trainable = False\n\n# our layers - you can add more if you want\nX = MaxPool2D()(rsnet.output)\nX = Flatten()(X)\nX = Dense(512, activation='relu')(X)\n\nX = Dense(5, activation='softmax')(X)\n\n# create a model object\nmodel = Model(inputs=rsnet.input, outputs=X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:17:06.664181Z\",\"iopub.status.idle\":\"2023-04-03T03:17:06.664582Z\",\"shell.execute_reply.started\":\"2023-04-03T03:17:06.664388Z\",\"shell.execute_reply\":\"2023-04-03T03:17:06.664407Z\"}}\n# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:17:06.669244Z\",\"iopub.status.idle\":\"2023-04-03T03:17:06.670429Z\",\"shell.execute_reply.started\":\"2023-04-03T03:17:06.670168Z\",\"shell.execute_reply\":\"2023-04-03T03:17:06.670195Z\"}}\n# view the structure of the model\nmodel.summary()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:17:06.671877Z\",\"iopub.status.idle\":\"2023-04-03T03:17:06.672759Z\",\"shell.execute_reply.started\":\"2023-04-03T03:17:06.672485Z\",\"shell.execute_reply\":\"2023-04-03T03:17:06.672527Z\"}}\n# fit the model\nmodel.fit(\n  train_data,\n  validation_data=validate_data,\n  epochs=15,\n  steps_per_epoch=len(train_data),\n  validation_steps=len(validate_data)\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-03T03:17:06.674383Z\",\"iopub.status.idle\":\"2023-04-03T03:17:06.675238Z\",\"shell.execute_reply.started\":\"2023-04-03T03:17:06.674982Z\",\"shell.execute_reply\":\"2023-04-03T03:17:06.675008Z\"}}\nlosses = model.history.history\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-17T05:30:55.046452Z\",\"iopub.execute_input\":\"2023-03-17T05:30:55.047047Z\",\"iopub.status.idle\":\"2023-03-17T05:30:55.425233Z\",\"shell.execute_reply.started\":\"2023-03-17T05:30:55.047012Z\",\"shell.execute_reply\":\"2023-03-17T05:30:55.424270Z\"}}\ndf_loss[['loss','val_loss']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"loss\",size=30)\nplt.title(\"LOSS VS EPOCHS\",size=60)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-03-17T05:30:55.651427Z\",\"iopub.execute_input\":\"2023-03-17T05:30:55.651787Z\",\"iopub.status.idle\":\"2023-03-17T05:30:56.020223Z\",\"shell.execute_reply.started\":\"2023-03-17T05:30:55.651755Z\",\"shell.execute_reply\":\"2023-03-17T05:30:56.019248Z\"}}\ndf_loss[['accuracy','val_accuracy']].plot(figsize=(10,6))\nplt.xlabel(\"No. of epochs\",size=30)\nplt.ylabel(\"Accuracy\",size=30)\nplt.title(\"Accuracy VS EPOCHS\",size=60)\n\n# %% [code]\n","metadata":{"_uuid":"814e09fd-a179-430a-8459-10d399d2ad3b","_cell_guid":"a904b9c6-02b0-4ec4-92cb-8d7852aab7af","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}